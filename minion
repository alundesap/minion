#!/usr/local/bin/node

const { execSync } = require('child_process');


var stringify = require("json-stringify-pretty-compact")
var treeify = require('treeify');

const fs = require('fs')

class FileDetails {
	constructor (filename) {
		const fs = require('fs')
		this.filename = filename
		this.exists = fs.existsSync(filename)
	}
}

const optionDefinitions = [
	{ name: 'verbose', alias: 'v', type: Boolean, multiple: true, defaultValue: false },
	{ name: 'file', alias: 'f', multiple: false, defaultOption: true, defaultValue: './mta.yaml', type: filename => new FileDetails(filename) },
	{ name: 'changed-file', alias: 'c', type: String },
	{ name: 'help', alias: 'h', type: Boolean },
	{ name: 'use-namespaces', alias: 'u', type: Boolean, defaultValue: false },
	{ name: 'no-namespaces-for-services', alias: 'n', type: Boolean, defaultValue: false },
	{ name: 'rectify-comments', alias: 'r', type: Boolean, defaultValue: false },
	{ name: 'generate-mtad', alias: 'g', type: Boolean, defaultValue: false },
	{ name: 'mtaext', alias: 'e', type: Boolean, defaultValue: false },
	{ name: 'dry-run', alias: 'd', type: Boolean, defaultValue: false },
	{ name: 'output-actions', alias: 'a', type: Boolean, defaultValue: false },
	{ name: 'script', type: Boolean, defaultValue: false },
	{ name: 'target', alias: 't', type: String, defaultValue: 'xsa' }
]

const watchFiles = [
	'mta.yaml',
	'xs-security.json',
	'deploy_cf.mtaext',
	'deploy_xsa.mtaext'
]

						// Docs: https://help.sap.com/viewer/58746c584026430a890170ac4d87d03b/Cloud/en-US/ba7dd5a47b7a4858a652d15f9673c28d.html
						// Use the Deployment as a guide.
						// https://help.sap.com/viewer/DRAFT/4505d0bdaf4948449b7f7379d24d0f0d/2.0.03/en-US/4050fee4c469498ebc31b10f2ae15ff2.html

const moduleTypes = [
	{ enabled: true,  type: 'hdb',                mtad: 'com.sap.xs.hdi',    xs: true,  cf: true,  desc: 'HDI content activation' },
	{ enabled: true,  type: 'html5',              mtad: 'javascript.nodejs', xs: true,  cf: true,  desc: 'HTML5 NodeJS app-router' },
	{ enabled: true,  type: 'javascript.nodejs',  mtad: 'javascript.nodejs', xs: true,  cf: true,  desc: 'NodeJS run time' },
	{ enabled: true,  type: 'nodejs',             mtad: 'javascript.nodejs', xs: true,  cf: true,  desc: 'NodeJS run time' },
	{ enabled: false, type: 'native',             mtad: 'native',            xs: true,  cf: true,  desc: 'Native, likely C, C++ compiled to the target Linux server environment' },
	{ enabled: false, type: 'custom',             mtad: 'custom',            xs: true,  cf: true,  desc: 'Custom run time + Automatic build-pack detectionx' },
	{ enabled: true,  type: 'java',               mtad: 'java.tomcat',       xs: true,  cf: true,  desc: 'Tomcat run time of sap_java_buildpack (handle tomee with TARGET_RUNTIME env var)' },
	{ enabled: true,  type: 'python',             mtad: 'python',            xs: true,  cf: true,  desc: 'Python run time' },
	{ enabled: false, type: 'static',             mtad: 'staticfile',        xs: false, cf: true,  desc: 'Static file run time' },
	{ enabled: false, type: 'ruby',               mtad: 'ruby',              xs: false, cf: true,  desc: 'Ruby run time' },
	{ enabled: false, type: 'go',                 mtad: 'go',                xs: false, cf: true,  desc: 'Go run time' },
	{ enabled: false, type: 'php',                mtad: 'php',               xs: false, cf: true,  desc: 'PHP run time' },
	{ enabled: false, type: 'binary',             mtad: 'binary',            xs: false, cf: true,  desc: 'Binary run time' },
	{ enabled: false, type: 'dotnet',             mtad: 'dotnet_core',       xs: false, cf: true,  desc: 'Dotnet run time' },
	{ enabled: false, type: 'xxx',                mtad: 'xxx',               xs: true,  cf: true,  desc: 'xxxx' }
]

const resourceTypes = [
	{ enabled: false, type: 'com.sap.xs.hana-sbss',             service: 'hana',                   xs: true,  cf: true,  plan: 'sbss',           desc: 'Service-broker security' },
	{ enabled: false, type: 'com.sap.xs.hana-schema',           service: 'hana',                   xs: true,  cf: true,  plan: 'schema',         desc: 'Plain schema' },
	{ enabled: true,  type: 'com.sap.xs.hdi-container',         service: 'hana',                   xs: true,  cf: true,  plan: 'hdi-shared',     desc: 'HDI container' },
	{ enabled: false, type: 'com.sap.xs.managed-hdi-container', service: 'managed-hana',           xs: true,  cf: true,  plan: 'hdi-shared',     desc: 'Managed HDI container' },
	{ enabled: false, type: 'com.sap.xs.managed-schema',        service: 'managed-hana',           xs: true,  cf: true,  plan: 'schema',         desc: 'Managed plain schema' },
	{ enabled: false, type: 'com.sap.xs.managed-securestore',   service: 'managed-hana',           xs: true,  cf: true,  plan: 'securestore',    desc: 'Managed HANA secure store' },
	{ enabled: false, type: 'com.sap.xs.jobscheduler',          service: 'jobscheduler',           xs: true,  cf: false, plan: 'default',        desc: 'Job Scheduler' },
	{ enabled: false, type: 'com.sap.xs.jobscheduler',          service: 'jobscheduler',           xs: false, cf: true,  plan: 'lite',           desc: 'Job Scheduler' },
	{ enabled: false, type: 'com.sap.xs.fs',                    service: 'fs-storage',             xs: true,  cf: false, plan: 'free',           desc: 'File-system storage' },
	{ enabled: false, type: 'com.sap.xs.fs',                    service: 'fs-storage',             xs: false, cf: true,  plan: 'lite',           desc: 'File-system storage' },
	{ enabled: true,  type: 'com.sap.xs.uaa',                   service: 'xsuaa',                  xs: true,  cf: true,  plan: 'default',        desc: 'Global UAA *' },
	{ enabled: false, type: 'com.sap.xs.uaa-application',       service: 'xsuaa',                  xs: false, cf: true,  plan: 'application',    desc: 'PaaS-enabled application UAA service plan for CF scenarios' },
	{ enabled: false, type: 'com.sap.xs.uaa-broker',            service: 'xsuaa',                  xs: false, cf: true,  plan: 'broker',         desc: 'PaaS-enabled broker UAA service for CF scenarios' },
	{ enabled: false, type: 'com.sap.xs.uaa-devuser',           service: 'xsuaa',                  xs: true,  cf: true,  plan: 'devuser',        desc: 'Development-user UAA service' },
	{ enabled: false, type: 'com.sap.xs.uaa-space',             service: 'xsuaa',                  xs: true,  cf: true,  plan: 'space',          desc: 'UAA service for a space' },
	{ enabled: false, type: 'com.sap.xs.uaa-system',            service: 'xsuaa',                  xs: false, cf: true,  plan: 'system',         desc: 'PaaS-enabled system UAA service for CF scenarios' },
	{ enabled: false, type: 'com.sap.xs.sds',                   service: 'sds',                    xs: true,  cf: true,  plan: 'default',        desc: 'Streaming Analytics' },
	{ enabled: false, type: 'com.sap.xs.auditlog',              service: 'auditlog',               xs: true,  cf: false, plan: 'free',           desc: 'Audit-log service' },
	{ enabled: false, type: 'auditlog',                         service: 'auditlog',               xs: false, cf: true,  plan: 'standard',       desc: 'Audit-log service' },
	{ enabled: false, type: 'com.sap.portal.site-content',      service: 'portal-services',        xs: true,  cf: true,  plan: 'site-content',   desc: 'Portal services(content)' },	
	{ enabled: false, type: 'com.sap.portal.site-host',         service: 'portal-services',        xs: true,  cf: true,  plan: 'site-host',      desc: 'Portal services(host)' },	
	{ enabled: false, type: 'application-logs',                 service: 'application-logs',       xs: false, cf: true,  plan: 'lite',           desc: 'Streams logs of bound applications to a central application logging stack' },
	{ enabled: false, type: 'autoscaler',                       service: 'autoscaler',             xs: false, cf: true,  plan: 'lite',           desc: 'Automatically increase or decrease the number of application instances based on a policy you define.' },
	{ enabled: false, type: 'connectivity',                     service: 'connectivity',           xs: false, cf: true,  plan: 'lite',           desc: 'Establishes secure, reliable connectivity between Cloud applications and on-premise systems' },
	{ enabled: false, type: 'feature-flags',                    service: 'feature-flags',          xs: false, cf: true,  plan: 'lite',           desc: 'Feature Flags service for the control of feature rollout' },
	{ enabled: false, type: 'ml-foundation-services',           service: 'ml-foundation-services', xs: false, cf: true,  plan: 'lite',           desc: 'Provides access to foundation services by provisioning and deprovisioning ml foundation services' },
	{ enabled: false, type: 'mongodb',                          service: 'mongodb',                xs: false, cf: true,  plan: 'v3.0-container', desc: 'MongoDB document-oriented database system' },
	{ enabled: false, type: 'objectstore',                      service: 'objectstore',            xs: false, cf: true,  plan: 's3-standard',    desc: 'Provides a highly available, distributed, consistent object store' },
	{ enabled: false, type: 'postgresql',                       service: 'postgresql',             xs: false, cf: true,  plan: 'v9.4-container', desc: 'Provides a postgreSQL object-relational database system' },
	{ enabled: false, type: 'rabbitmq',                         service: 'rabbitmq',               xs: false, cf: true,  plan: 'v3.6-container', desc: 'Provides RabbitMQ messaging' },
	{ enabled: false, type: 'redis',                            service: 'redis',                  xs: false, cf: true,  plan: 'v3.0-container', desc: 'Redis in-memory data structure store' },
	{ enabled: false, type: 'xxx',                              service: 'xxx',                    xs: true,  cf: true,  plan: 'xxx',            desc: 'xxx' }
]


// 
const commandLineArgs = require('command-line-args')
const options = commandLineArgs(optionDefinitions)

const commandLineUsage = require('command-line-usage')

var auto_script = "";
auto_script += "\n";
auto_script += "In the WebIDE, create a file called findme123.txt at the top directory of one of your projects.\n";
auto_script += "Replace HXE with your SID if not using HANA Express.\n";
auto_script += "\n";
auto_script += "cd /hana/shared/HXE/xs/controller_data/fss/\n";
auto_script += "found=$(find . -name findme123.txt -print)\n";
auto_script += "cd ${found/findme123.txt//} ; cd .. ; pwd ; cd ~/../HDB00\n";
auto_script += "ln -s <pwd> workspace\n";
auto_script += "\n";
auto_script += "DIFF=0 ; LAST=0 ; \n";
auto_script += "inotifywait -re modify -m --exclude '/\\..+' . | \n";
auto_script += "while read -r directory events filename; do \n";
auto_script += " relpath=$directory$filename; \n";
auto_script += " NOW=$(date +%s); \n";
auto_script += " DIFF=$(($NOW - $LAST)); \n";
auto_script += " if [[ $DIFF -gt 10 ]]; then \n";
auto_script += "  echo ; \n";
auto_script += "  echo minion -ungead -t xsa -c $relpath ; \n";
auto_script += "  minion -u -c $relpath ; \n";
auto_script += " fi ; \n";
auto_script += " LAST=$(date +%s); \n";
auto_script += "done\n";

auto_script += "\n";
auto_script += "For a single running instance, change into it's app directory.\n";
auto_script += "dir=$(ps aux | grep 'python server.py' | grep executionroot | tr -s '' | cut -d ' ' -f 26 | cut -d '.' -f 1,2,3) ; cd $dir";
auto_script += "\n";

const sections = [
	{
		header: 'Minion',
		content: 'NodeJS utility that reads mta.yaml files and performs needed actions.'
	},
	{
		header: 'Options',
		optionList: [
			{
			name: '{underline f}ile',
				typeLabel: '{underline mta.yaml}',
				description: 'The mta.yaml file to process. (default = mta.yaml)'
			},
			{
				name: '{underline c}hanged-file',
				description: 'Relative path to a recently changed file. If --output-actions is specified, needed actions will be output.'
			},
			{
				name: '{underline u}se-namespaces',
				description: 'Use namespaces in app and service names.'
			},
			{
				name: '{underline n}o-namespaces-for-services',
				description: 'Do not use namespaces in service names.'
			},
			{
				name: '{underline r}ectify-comments',
				description: 'Preprocess the mta.yaml file to comment/un-comment blocks demarked with blah.'
			},
			{
				name: '{underline g}enerate-mtad',
				description: 'Generate an mtad.yaml file from the mta.yaml file.'
			},
			{
				name: '{underline d}ry-run',
				description: 'Don\'t attempt to execute actions. --generate-mtad will still create an mtad.yaml file if specified.'
			},
			{
				name: 'output-{underline a}ctions',
				description: 'Echo to the console actions that will be taken. Use with --dry-run if you don\'t want minion to perform the actions.'
			},
			{
				name: '{underline v}erbose',
				description: 'Verbose output. Use -vv and -vvv for increased verbosity.'
			},
			{
				name: '{underline c}f',
				description: 'Target Cloud Foundry for deployment.'
			},
			{
				name: '{underline x}sa',
				description: 'Target XSA on-prem for deployment.'
			},
			{
				name: 'script',
				description: 'Output a handy automation script.'
			},
			{
			name: '{underline h}elp',
				description: 'Print this usage guide.'
			}
		]
	}
]

const usage = commandLineUsage(sections)

var cmd = "";
var cmds = [];
var ccmds = [];	// Change commands

var DepGraph = require('dependency-graph').DepGraph;

yaml = require('js-yaml');

// https://www.npmjs.com/package/dependency-graph
var graph = new DepGraph({ circular: true });

//graph.addNode('d');
//graph.addNode('m');
//graph.addNode('r');
//
//graph.addDependency('d', 'm');
//graph.addDependency('m', 'r');

//if (verbosity >= 1) { console.log(JSON.stringify(graph.overallOrder())); }

var verbosity = 0;

var cli = 'xs';

if (options.help) {
	console.log(usage)
}
else if (options.script) {
	console.log("Automation Script:\n\n" + auto_script + "\n");
}
else {

	verbosity = options.verbose.length;
	if (!(options.verbose[0])) { verbosity = 0; }

	if (verbosity >= 1) { console.log("\nStart Minion.\n"); }

	if (verbosity >= 1) { console.log("verbosity: " + verbosity + "\n"); }

	options.target = options.target.toLowerCase();

	if (options.target === 'xsa') {
		cli = 'xs';
	}
	else if (options.target === 'cf') {
		cli = 'cf';
	}
	else {
		cli = 'xs';
	}
	if (verbosity >= 2) { console.log("Minion Stuff.\n"); }

	if (typeof(options.file) === "string") {
		options.file = new FileDetails(options.file);
	}

	//if (verbosity >= 1) { console.log("Options:\n" + stringify(options, {indent: 1}) + "\n"); }
	if (verbosity >= 2) { console.log("Options:\n" + treeify.asTree(options,true) + "\n"); }


	// http://connec.github.io/yaml-js/


	if (options.file.exists) {
		// http://thisdavej.com/getting-started-with-yaml-in-node-js-using-js-yaml/
		// https://en.wikipedia.org/wiki/YAML
		// http://lzone.de/cheat-sheet/YAML
		try {
			var doc = yaml.safeLoad(fs.readFileSync(options.file.filename, 'utf8'));
			if (verbosity >= 3) { console.log("MTA.YAML File: \n" + treeify.asTree(doc,true) + "\n"); }

			if (options['generate-mtad']) { 
				
				var newDoc = JSON.parse(JSON.stringify(doc));

				newDoc.modules.forEach((module, index) => {
					if (verbosity >= 3) { console.log("mod[" + index + "]: " + module.name + "\n"); }
					//Replace Module type with mtad version
					moduleTypes.forEach((mtype, index) => {
						if (module.type == mtype.type) {
							if (mtype.enabled) {
								module.type = mtype.mtad;	
							}
							else {
								if (verbosity >= 1) { console.log("Module type " + mtype.type + " replacement needed, but it is not enabled."); }
							}
						}
					});
				});

				mtad_filename = options.file.filename.replace("mta.yaml","mtad.yaml");
				if (verbosity >= 3) { console.log("MTAD.YAML File: " + mtad_filename + "\n" + treeify.asTree(newDoc,true) + "\n"); }
				fs.writeFileSync(mtad_filename, yaml.dump(newDoc),'utf8', function (err) {
    				if (err) {
			        return console.log(err);
    				}

				   if (verbosity >= 3) { console.log("The file was saved!"); }
				});
			}

			// Insert the root into the graph
			graph.addNode('doc', doc.ID);
			graph.addNode('modules');
			graph.addDependency('doc', 'modules');
			graph.addNode('resources');
			graph.addDependency('modules','resources');

			// Insert resources into the graph
			doc.resources.forEach((resource, index) => {
				if (verbosity >= 2) { console.log("res[" + index + "]: " + resource.name + "\n"); }
				graph.addNode(resource.name, resource);
				graph.addDependency('resources',resource.name);
			});

			// Insert modules into the graph
			doc.modules.forEach((module, index) => {
				if (verbosity >= 2) { console.log("mod[" + index + "]: " + module.name + "\n"); }
				graph.addNode(module.name, module);
				graph.addDependency('modules',module.name);
			});

			// Set dependencies (from, to)
			doc.modules.forEach((module, index) => {
				if (typeof(module.requires) === "object") {

					// The module will either require a resource with that name or another module that 'provides' that name
					module.requires.forEach((req, idx) => {

						// Loop through the resources looking for it.
						doc.resources.forEach((resource, index) => {
							//if (verbosity >= 2) { console.log("res[" + index + "]: " + resource.name + "\n"); }
							if (req.name == resource.name) {
								if (verbosity >= 2) { console.log("mod[" + module.name + "] -> " + req.name + "\n"); }
								graph.addDependency(req.name,resource.name);
							}
						});

						// Loop through the modules looking for one that provides it.
						doc.modules.forEach((mod, index) => {
							//if (verbosity >= 2) { console.log("mod[" + index + "]: " + mod.name + "\n"); }
							//if (verbosity >= 2) { console.log(typeof(mod.provides)); }
							if (typeof(mod.provides) === "object") {
							mod.provides.forEach((prov, pidx) => {
								if (req.name == prov.name) {
									if (verbosity >= 2) { console.log("mod[" + module.name + "] -> " + mod.name + "\n"); }
									graph.addDependency(module.name,mod.name);
								}
							});
							}
						});

					});
				}
			});

			// Print out the order of dependencies
			//if (verbosity >= 2) { console.log("mod deps:\n" + stringify(graph.dependenciesOf('doc')) + "\n"); }
			var deps = graph.overallOrder();
			if (verbosity >= 2) { console.log("mod deps:\n" + JSON.stringify(deps) + "\n"); }

			// General Actions
			if (verbosity >= 2) { console.log("General Actions:"); }

			cmd = 'npm config set @sap:registry "https://npm.sap.com/" ; npm config set registry "https://registry.npmjs.org/" ; npm config set strict-ssl true\n';
			if (verbosity >= 2) { console.log(cmd); }
			cmds.push(cmd);

			var changed = "";
			var changed_node = {};
			var in_file = "";


			if (typeof(options['changed-file']) === 'string') {

				in_file = options['changed-file'];
				in_file = in_file.substring(2,in_file.length);
				// Parse out the module path
				var n = in_file.indexOf("\/");
				if ( n > 0 ) {
					in_file = in_file.substring(0,n);
				}

				// See if it's a top level file.

				watchFiles.forEach((file) => {
					if (file === in_file) {
						changed = file;
						if (verbosity >= 2) { console.log("Changed: " + changed); }
					}
				});

			}


			var node = {};
			var didx = 0;
			deps.forEach((dep, index) => {
				if ((dep !== "resources") && (dep !== "modules") && (dep !== "doc")) {

					node = graph.getNodeData(dep);
					if (dep === in_file) {
						changed = dep;
						changed_node = node;
						if (verbosity >= 1) { console.log("Changed: " + changed); }

					}
					if (verbosity >= 1) { console.log("node[" + didx + "] = " + node.name + ""); }
					if (verbosity >= 3) { console.log("\n" + treeify.asTree(node,true) + "\n"); }

					// Process this type of node

					// Find details on how to handle this node type
					// See if it's a resource
					resourceTypes.forEach((rtype, index) => {
						if (node.type == rtype.type) {
							if (rtype.enabled) {
								if (verbosity >= 3) { console.log("resType " +node.type + " found, and is enabled.\n"); }
								
								// Create Service
								svc_name = rtype.service;
								svc_plan = rtype.plan;
								svc_inst = node.name;

								if ((options['use-namespaces']) && (!(options['no-namespaces-for-services']))) { 
									svc_inst = doc.ID + '.' + node.name;
								}

								if (verbosity >= 2) { console.log("Action:"); }

								cmd = cli + " create-service " + svc_name + " " + svc_plan + " " + svc_inst + "";
								cmds.push(cmd);
								if (verbosity >= 2) { console.log(cmd); }

								// Bind ?
							}
							else {
								// Issue warning
								if (verbosity >= 2) { console.log("resType " +node.type + " found, but not enabled.\n"); }
							}		
						}
					});

					// See if it's a module
					moduleTypes.forEach((mtype, index) => {
						if (verbosity >= 3) { console.log(node.type + " == " + mtype.type); }
						if (node.type == mtype.type) {
							if (mtype.enabled) {
								if (verbosity >= 2) { console.log("nodeType " +node.type + " found, and is enabled.\n"); }
								// Push
								// Defaults
								app_name = node.name;
								app_disk = '1024M';
								app_mem = '256M';
								app_host = node.name;
								app_path = node.name;

								app_opts = '--no-start';
								//app_opts = '';

								if (options['use-namespaces']) { 
									app_name = (doc.ID).toLowerCase() + '.' + node.name;
								}
								else {
									app_name = node.name;
								}

								if (typeof(node.parameters) === "object") {
									if (typeof(node.parameters.memory) === "string") {
										app_mem = node.parameters.memory;
									}
									if (typeof(node.parameters.host) === "string") {
										app_host = node.parameters.host;
									}
								}

								if (typeof(node.path) === "string") {
									app_path = node.path;
								}

								if (verbosity >= 2) { console.log("Action:"); }
								if (mtype.mtad == "javascript.nodejs") {
									cmd = "cd " + app_path + " ; rm -rf node_modules ; npm install ; cd .."
									cmds.push(cmd);
									if (verbosity >= 2) { console.log(cmd); }
								}

								if (mtype.mtad == "com.sap.xs.hdi") {

									if (typeof(node.requires) === "object") {
										if (typeof(node.requires[0].name) === "string") {
											db_req = node.requires[0].name;

											if ((options['use-namespaces']) && (!(options['no-namespaces-for-services']))) { 
												db_req = (doc.ID).toLowerCase() + '.' + db_req;
											}

											cmd = "";
											cmds.push(cmd);
											if (verbosity >= 2) { console.log(cmd); }

											cmd = cli + " create-service " + "hana" + " " + "hdi-shared" + " " + db_req;
											cmds.push(cmd);
											if (verbosity >= 2) { console.log(cmd); }

											cmd = "find . -type d -name '.vfs' -prune -exec rm -rf {} +";
											cmds.push(cmd);
											if (verbosity >= 2) { console.log(cmd); }


											cmd = cli + " push " + app_name + " -k " + app_disk + " -m " + app_mem + " -n " + app_host + " -p " + app_path + " --no-start --no-route";
											cmds.push(cmd);
											if (verbosity >= 2) { console.log(cmd); }

											cmd = cli + " bind-service " + app_name + " " + db_req;
											cmds.push(cmd);
											if (verbosity >= 2) { console.log(cmd); }

											if (options.target === 'xsa') {
												cmd = cli + " restart " + app_name + " --wait-indefinitely ; sleep 10 ; " + cli + " stop " + app_name + "";
												cmds.push(cmd);
												if (verbosity >= 2) { console.log(cmd); }
											}
											else if (options.target === 'cf') {
												cmd = cli + " restage " + app_name + " ; sleep 1 ; " + cli + " start " + app_name + " ; sleep 20 ; " + cli + " stop " + app_name + "";
												cmds.push(cmd);
												if (verbosity >= 2) { console.log(cmd); }
											}
											else {
											}

											cmd = "";
											cmds.push(cmd);
											if (verbosity >= 2) { console.log(cmd); }
										}
									}
								}
								else {
									cmd = cli + " push " + app_name + " -k " + app_disk + " -m " + app_mem + " -n " + app_host + " -p " + app_path + " " + app_opts;
									cmds.push(cmd);
									if (verbosity >= 2) { console.log(cmd); }
								}

								if (dep === in_file) {
									ccmds.push(cmd);
									// ReBind??
									// xs bind-service APP SERVICE_INSTANCE
									// console.log(treeify.asTree(changed_node,true));
									changed_node.requires.forEach((req) => {
										// Check that the dependency is a resource and not another module
										var found = false;
										doc.resources.forEach((resource, index) => {
											if (resource.name == req.name) {
												// Bind to required service instance
												var svc_name = req.name;
												if ((options['use-namespaces']) && (!(options['no-namespaces-for-services']))) { 
														svc_name = (doc.ID).toLowerCase() + '.' + svc_name;
												}
												cmd = cli + " bind-service " + app_name + " " + svc_name;
												ccmds.push(cmd);
												found = true;
											}
										});
										if (found) {
											if (verbosity >= 3) { console.log(req.name + " is a resource."); }
										}
										else {	// It's not a resource so check for group called destinations

// IMPORTANT NOTE:  This needs to be done not only when the html5 module changes but also when the mta.yaml changes!!! Need to figure this out!

											if (verbosity >= 3) { console.log(req.name + " is another module."); }
											if (verbosity >= 3) { console.log("Req:\n" + treeify.asTree(req,true) + "\n"); }
											if ((typeof(req.group) == "string") && (req.group == "destinations")) {
												if (verbosity >= 3) { console.log(req.name + " has a destinations group."); }
												if (verbosity >= 3) { console.log(JSON.stringify(req.properties)); }
												// add this object to a array of objects that will be used to form the destinations env var for the html5 module
												// will need to loop through this list and find the other module that provides named  that matches req.name
												// once you find that module's name, you will need to use the cli to ask what that module's url is
												// xs app and cf app provide ther output differently, so may be useful to write a shell wrapper to parse
												// and return the url uniformly.
												// Once you have the url, then combine it to form the destinations env-var for the approuter
												// url=$(cf app mta_xsahaa.xsjs | grep routes: | tr -s ' ' | cut -d ' ' -f 2) ; echo "https://"$url
												// url=$(xs app mta_xsahaa.xsjs | grep urls: | tr -s ' ' | cut -d ' ' -f 3) ; echo $url

											}
											else {
												if (verbosity >= 3) { console.log(req.name + " has no destinations group."); }
											}
										}

									});
									// Need to figure out how to generate this
									// The approuter is the module at the root of the tree
									// Will need to find it and wander through it's dependencies looking for destinations
/*
 - name: web
   type: html5
   path: web
   parameters:
      memory: 96MB
      disk: 256M
      host: xsahaa
   requires:
    - name: xsahaa-uaa
    - name: xsjs_api
      group: destinations
      properties:
        name: xsjs_be
        url: ~{url}
        forwardAuthToken: true
*/
									if (changed_node.type === "html5") {
										cmd = cli + " set-env " + "mta_xsahaa.web" + " destinations " + '\'[{"forwardAuthToken": true,"name": "xsjs_be","url": "https://xsahaa-xsjs.us.sap-a-team.com"}]\'' + "";
										cmds.push(cmd);
										ccmds.push(cmd);
										if (verbosity >= 2) { console.log(cmd); }
									}

									if (changed_node.requires.length > 0) {
										cmd = cli + " restart " + app_name;
										ccmds.push(cmd);
									}
								}

								cmd = "";
								cmds.push(cmd);

							}
							else {
								// Issue warning
								if (verbosity >= 2) { console.log("nodeType " +node.type + " found, but not enabled.\n"); }
							}		
						}
					}); // For each module

					didx++;
				}	// If it's not a placeholder module in the graph
			});	// For each dependency in the graph


			if (verbosity >= 2) { console.log("Packaging Actions:"); }

			cmd = "mkdir -p target";
			cmds.push(cmd); if (verbosity >= 2) { console.log(cmd); }

			if (options.target === 'xsa') {
				cmd = "mta --build-target XSA --mtar target/" + (doc.ID).toLowerCase() + "_xsa.mtar build";
			}
			else if (options.target === 'cf') {
				cmd = "mta --build-target CF --mtar target/" + (doc.ID).toLowerCase() + "_cf.mtar build";
			}
			else {
				cmd = "mta --build-target XSA --mtar target/" + (doc.ID).toLowerCase() + "_xsa.mtar build";
			}

			cmds.push(cmd); if (verbosity >= 2) { console.log(cmd); }

			deploy_ops = "";
			if (options['use-namespaces']) {
				deploy_ops += " --use-namespaces";
			}
			if (options['no-namespaces-for-services']) {
				deploy_ops += " --no-namespaces-for-services";
			}

			if (options['mtaext']) {
				if (options.target === 'xsa') {
					deploy_ops += " -e deploy_xsa.mtaext";
				}
				else if (options.target === 'cf') {
					deploy_ops += " -e deploy_cf.mtaext";
				}
				else {
					deploy_ops += " -e deploy_xsa.mtaext";
				}
			}

			if (verbosity >= 2) { console.log("Deploy Actions:"); }

			if (options.target === 'xsa') {
				cmd = cli + " deploy target/" + (doc.ID).toLowerCase() + "_xsa.mtar" + deploy_ops;
			}
			else if (options.target === 'cf') {
				cmd = cli + " deploy target/" + (doc.ID).toLowerCase() + "_cf.mtar" + deploy_ops;
			}
			else {
				cmd = cli + " deploy target/" + (doc.ID).toLowerCase() + "_xsa.mtar" + deploy_ops;
			}
			cmds.push(cmd); if (verbosity >= 2) { console.log(cmd); }

			cmd = "";
			cmds.push(cmd);
			if (verbosity >= 2) { console.log(cmd); }
			
			if (verbosity >= 2) { console.log("Undeploy Actions:"); }
			cmd = cli + " undeploy " + doc.ID + " --delete-services -f";
			cmds.push(cmd); if (verbosity >= 2) { console.log(cmd); }
			
			if (options['output-actions']) {
				console.log("");
				cmds.forEach((cmd, idx) => {
					console.log(cmd);
				});
				console.log("");
			}

			// Actions needed to process what has just changed.


			var child = {};
			if (changed.length > 0) {
				console.log("");
				ccmds.forEach((cmd, idx) => {
					console.log(cmd);

					if (!(options['dry-run'])) {
						let stdout = execSync(cmd,{stdio:[0,1,2]});
					}

				});
				console.log("");
			}

		} catch (e) {
			if (verbosity >= 2) { console.log("Yaml load error:" + e); }
		}
	}
	else {
		if (verbosity >= 2) { console.log("File: " + options.file.filename + " doesn't exist.\n"); }
	}
}

if (verbosity >= 1) { console.log("\nMinion Ends.\n"); }

